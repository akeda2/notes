#!/bin/bash
shopt -s inherit_errexit
set -euo pipefail
IFS=$'\n\t'
# set -x
# export PS4=':.$LINENO:'

# ----------------------------------------------------------------------

stop_task() {
    HM=`date +%H:%M`; perl -i -pe "s/\t_____\t/\t$HM\t/" $FILE
}

add_task() {
    printf "%s\t%s\t%s\t%s\t%s\n" "`date -I`" "`date +%H:%M`" "_____" "$tag" "$text" >> $FILE
}

get_details() {
    echo "please supply a TAG (a short word or mnemonic string) and a TEXT (a line of arbitrary text):"
    read -p "TAG: " tag
    read -p "TEXT: " text
}

f1_help() {
    cat <<EOF | less -c
Help for "track my time"

You can access this help at any time by hitting F1.

-   "Currently running task": a task is "running" if the second HH:MM field is
    just "_____".  At most one task can be running at any time.  If no task is
    running, it means you're "off the clock" (e.g., at end of day).

-   F7 creates a new task and marks it as "running".  Any task previously
    marked as running is given an end time to mark it as stopped.

-   ENTER on a stopped task resumes it.  As with F7, any previously running
    task is marked stopped.

-   ENTER on a running task stops it.  Now you're off the clock (nothing is
    running).

-   The preview window shows tag-wise totals and grand totals for the date on
    the current line.  If you type in an fzf query string, the totals will be
    further reduced to those matching the query

-   F3 shows totals for *selected* rows only, regardless of date.  Use fzf
    features (filtering, multi-selection with TAB, select all with ctrl-a) to
    select rows you want, then hit F3.

-   F4 to change text, fix timestamps, add notes and comments, etc., in your
    \$EDITOR.  Tmt only looks at lines starting with YYYY-MM (e.g., 2021-01);
    everything else is ignored so you can type in whatever you want!

    -   WARNING: there is NO ERROR CHECKING on dates and times!

    -   WARNING: don't remove the hard tabs separating the fields on the lines
        that tmt *does* care about :)

Caveat:

-   doesn't support tasks crossing midnight; if you *really* need it let me know

EOF
}

total() {
    # this takes multiple lines of stdin and produces tag-wise totals, and a grand total
    perl -MTime::Piece -lanE '
        $F[2] = localtime->strftime("%H:%M") if /_____/;
        $count++;
        ($sh, $sm, $eh, $em) = split /:/, "$F[1]:$F[2]";
        $diff = $eh*60+$em - $sh*60-$sm;
        $sum+=$diff;
        $sum{$F[3]}+=$diff;
        sub hhmm { $mm=shift; return sprintf "%02d:%02d", int($mm/60), $mm%60; }
        END {
            say "$_\t" . hhmm($sum{$_}) for sort keys %sum;
            $rd = ""; $rd = " on $ENV{RD}" if $ENV{RD};
            printf "\ntotal:\t%s", hhmm($sum) . " from $count entries$rd\n";
            printf "current time: " . localtime->strftime("%H:%M");
        }' |
    less -c
}

f7_new() {
    stop_task
    cat <&3 > /dev/null     # flush rest of output from fzf
    get_details
    add_task
}

enter_stop_start() {
    # read line.  If line is a running task (i.e., contains "_____"), just stop it.
    # otherwise it's a different line (task), so stop the *running* task, then restart the selected task
    # (i.e., take fields 5 and 6 into tag and text and start it)
    IFS= read -r -u3 l
    stop_task
    if [[ $l =~ _____ ]]
    then
        :
    else
        tag=$(echo "$l" | cut -f4)
        text=$(echo "$l" | cut -f5)
        add_task
    fi
}

# ----------------------------------------------------------------------

FILE=time.tsv
[[ -f $FILE ]] || {
    echo "DATE      	START	END  	TAG   	TEXT" > $FILE
    f1_help
}

unset FZF_DEFAULT_OPTS

# ----------------------------------------------------------------------

export -f total
# this function is called within 'preview' so we need it exported

query=''
while :
do
    {
        IFS= read -r -u3 query
        IFS= read -r -u3 key
        case $key in
            f1 )
                f1_help ;;
            f3 )
                cat <&3 | total ;;
            f4 )
                IFS= read -r -u3 line
                line=${line//\//\\/}
                ${EDITOR:-vim} $FILE "+/\\M$line" ;;
            f5 )
                continue ;;
            f7 )
                f7_new ;;
            f10 )
                break ;;
            *  )
                # "ENTER"
                enter_stop_start ;;
        esac
    } 3< <( grep -E -e ^DATE -e '^[0-9]{4}-[0-9]{2}' $FILE | fzf -d$'\t' -m -e +s --tac --info=inline \
        --print-query \
        --query="$query" \
        --header-lines=1 \
        --header="ENTER:stop/start, F1:help, F3:(see help), F4:edit, F5:refresh, F7:new, F10:quit" \
        --bind ctrl-a:select-all --expect=f1,f3,f4,f5,f7,f10 \
        --preview="grep ^{1} $FILE | fzf -f {q} -e +s | env RD={1} bash -c total" \
        --preview-window=top:50% )
done
