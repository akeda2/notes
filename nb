#!/bin/bash

# Search, edit, and create entries in a "notebook" directory.

# Search:
#
#   Entries are searched by **paragraph** using fzf (with all its magic!); the
#   filename is included in the search, which is convenient.
#
#   If the search fails, hit Ctrl-G to exit, otherwise you *may* still end up
#   in the editor (that's how "create" works; see below).

# Edit:
#
#   Same thing; just use the filename itself as a word and pick any line;
#   it'll get you into the editor, and from there it's between you and your
#   mad vim skills :)

# Create:
#
#   Just type the filename you would like, hit enter, and you're in vim.
#
#   The trouble comes if you're trying to add a file whose name is already
#   satisfied by the search :-)  In that case you may have to manually go into
#   the notebook directory and add one.
#
#   (This does not happen to me because all my filenames end in ".mkd", So
#   when I run "nb foo.mkd", even if "foo" was found in multiple places, it's
#   unlikely that "foo.mkd" will be found so it works out.)

cd ~/.notebook

# fd without '-HI -E .git' is fine here, since the notebook directory will not
# have any hidden files.

# Also, I don't have any files with spaced in their names.  Catering to that
# would make the whole thing much more complicated, because we're using a perl
# idiom that works only for filenames passed in as *arguments*, so we'd have
# to use a BEGIN block to set up @ARGV or ditch the "-n" and explicitly loop.

# Anyway what this does is print all the lines in all the files, each prefixed
# by the filename and the line number, and the "newline" representing an empty
# line (i.e., end of a paragraph) converted to a NULL character (so fzf can
# "--read0" it).

set -o pipefail
# we need this to know whether the user hit Crl-G

# no arguments?  just print the top level files/dirs
[[ -z $1 ]] && exec /bin/ls -1

x=$(perl -ne '$_ =~ s/\n/\0/ if $_ eq "\n" or eof; print "$ARGV:$.:$_"; close ARGV if eof' `find -L -type f|cut -c3-` \
    | fzf -q "$*" \
        --tac \
        --read0 \
        --color=hl:12,hl+:12 \
        --preview-window=wrap:top:75% \
        --preview="echo {}|cut -d: -f3-" \
    | head -1 \
    | cut -f1-2 -d:
)

# user hit Ctrl-G
[[ $? = 130 ]] && exit 0

if [[ -z $x ]]; then
    # could not be found, but user did not hit Ctrl-G.  If the input is
    # exactly one word, open the editor on a file with that name.
    [[ -z $2 ]] && exec ${EDITOR:-vim} $1
    # if there was more than one argument just declare failure
    exit 1
fi

# search succeeded; just open the file at the right place
IFS=: read f l <<< "$x"
vim $f +$l +/$1
