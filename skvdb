#!/bin/bash

usage() {
    cat <<-EOF
	Usage:
	    $0 get key
	    $0 set key val
	    $0 lock key info
	    $0 unlock key
	    $0 del key
	    $0 listkeys

	Locking is co-operative.  Always check return code of "lock" command; if
	it failed, wait and try again.  If it succeeded, don't forget to "unlock"
	when done.  The "info" is any text that can identify the locker to another
	process (or a human).

	(Internally, "lock" is just "error out if key already exists, else set key
	to the info given", and "unlock" is just "del"!)
EOF
}

die() { echo >&2 "$@"; exit 1; }

DB=$HOME/.cache/skvdb;
[[ -d $DB ]] || mkdir -p $DB $DB/.keys
[[ -d $DB ]] || die "'$DB' not found";

cd $DB

# convert arbitrary text in $2 into something that is a valid file name
h2=$(echo -n "$2" | md5sum | cut -c1-32)

case "$1" in
    get )
        [[ -f $h2 ]] && cat $h2 && exit 0
        die "key '$2' hash $h2 not found"
        ;;
    set )
        echo "$3" > $h2
        echo "$2" > .keys/$h2
        ;;
    del )
        [[ -f $h2 ]] && rm $h2 .keys/$h2
        ;;
    lock )
        [[ -f $h2 ]] && die "already locked by `cat $h2`"
        echo "$3" > $h2         # same as "set"
        echo "$2" > .keys/$h2
        ;;
    unlock )
        rm $h2 .keys/$h2        # same as "del"
        ;;
    listkeys )
        cd .keys; grep . *      # TODO: find a better way to do this?
        ;;
    * )
        usage;;
esac
