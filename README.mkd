# Various tools in my toolbox -- notes and code

Over the past couple of decades, I have used several Unix tools, and have
amassed a pretty good collection of notes, tips, and tricks on many of them.
I've also created several little tools for my own use.

Over the next few weeks/months I hope to add those notes, cleaned up and made
current, to this repo.

I should mention that some of the tools in this repo did, at some time, have
their own repos.  But they all gradually became smaller and simpler (as I
became smarter??) so I moved many of them to this repo instead.  These repos
are (so far):

*   `bq`
*   `active-aliases`
*   `lineup`

----

<!--ts-->
   * [external tools](#external-tools)
      * [vifm -- file manager with vim-like key bindings](#vifm----file-manager-with-vim-like-key-bindings)
   * [my own tools](#my-own-tools)
      * [installation](#installation)
      * [compatibility / requirements](#compatibility--requirements)
      * [one-line descriptions](#one-line-descriptions)
         * [try](#try)
   * [appendix A: other tools in my toolbox](#appendix-a-other-tools-in-my-toolbox)
      * [map](#map)
   * [appendix B: really minor hacks...](#appendix-b-really-minor-hacks)
      * [lineup](#lineup)

<!-- Added by: sitaram, at: Sun 06 Oct 2019 10:04:34 AM IST -->

<!--te-->

----

# external tools

## vifm -- file manager with vim-like key bindings

I had been somewhat happy with the file manager I had been using for some
years, having learnt to live with it's somewhat baroque configuration
requirements (involving 4 different files -- 2 custom syntaxes, 1 shell, and 1
python!)

<!--

Plus the ominous warnings saying:

    Please note that configuration files may change as ranger evolves.  It's
    completely up to you to keep them up to date.

which, while not far from the truth for *any* app, are simply worse here
because of the 4 different formats!

-->

But the urge to move on was there, and one weekend I started looking around,
eventually finding [vifm](https://vifm.info).

It has some really nice features that I explore in
[vifm.mkd](vifm.mkd).

# my own tools

## installation

Any or all of these can be installed simply by copying the corresponding
script(s) to some place in your `$PATH`.  They're not meant to be any more
complicated than that.

## compatibility / requirements

I've only tested these on Linux.  I only use `bash` (not interested in
limiting myself to `sh`).

Some of them may require a relatively recent perl and bash.

I make good use of all the mod-cons; `fd`, `rg (ripgrep)`, and `fzf` to start
with.

I think somewhere in my scripts I use `sponge` from `moreutils`.

Anything more specific should be mentioned in the markdown file corresponding
to the specific tool in question (for example, `dirstat` uses GNU "datamash",
and you'll see it mentioned in `dirstat.mkd`).

## one-line descriptions

### `try`

`try` is an interesting use of `fzf`'s "preview" function.  You run it like:

    try 'dirstat -d 1'

or even just `try` and then type/modify the command you want to run.

Try is the only tool in this toolbox that has a [video](try.webm) rather than
a markdown file.

<!--

# details (of some of the smaller ones)

-->

# appendix A: other tools in my toolbox

## map

`map` is my replacement for xargs, at least until someone like BurntSushi or
sharkdp writes something to replace it (as they did with ripgrep (grep) and fd
(find) respectively!)

Has only 3 options, and does so, so, much!

It's just a bit bigger than the tools here, so I left it in its own repo: <https://github.com/sitaramc/map>

# appendix B: really minor hacks...

...that might nevertheless help someone.

## `lineup`

`lineup` is basically just:

    sed -e 's/   */\t/g' | column -s$'\t' -t -o$'\t' | sed -e 's/\t/ \t/g' | expand -4

IOW, it's just a wrapper over `column -t`, but with one important difference:
you need at least two spaces to be considered a different field, just one
space won't do.  (Of course, the output also preserves that property,
otherwise it's not idempotent; you can't run `lineup` on the output of an
earlier `lineup` and get consistent results).

Here's example input:

    name            one-line description
    ----            --------------------
    apples      healthy, juicy, fruit
    red apples      well duh, apples that are, you know, red!

after running `lineup` becomes:

    name        one-line description
    ----        --------------------
    apples      healthy, juicy, fruit
    red apples  well duh, apples that are, you know, red!

(with `column -t` that would become:

    name    one-line              description
    ----    --------------------
    apples  healthy,              juicy,       fruit
    red     apples                well         duh,   apples  that  are,  you  know,  red!

