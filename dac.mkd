# dac -- "dotfiles and configs" manager

There are hundreds, probably thousands, of dotfile managers around, from well
known ones like GNU Stow and `vcsh` to lesser known ones too numerous to
mention.  People have even used tools like Ansible, Chef, Puppet, etc., for
this, if I am not mistaken.

But they're all missing one feature that is very important to me: **do not
force a change if I don't want it right now**, whether it is committing a
change **to** the repo, or accepting a change **from** the repo into the local
filespace.

Note that this script runs as root, since it manages dot files for multiple
users as well as various system config files.

----

# the most important things I need

1.  Basically, any file on any machine can have minor differences from the
    version in the git repository.

    For example, bashrc on one machine may need a couple of environment
    variables defined differently.  Or a script on a machine running an LTS
    distro may have differences because the packages on that distro are older
    or missing.  Or the name of the wifi device, used by just a couple of
    scripts, may be different on different machines.

    So I need this to be pretty granular; in fact I use `vimdiff` to actually
    propagate changes.  No blindly copying files in either direction!

2.  I need to manage not just user's dotfiles, but also important system files
    like `/etc/ssh/sshd_config`, `/etc/sudoers`, crontabs, and many more.

    I also have some differences between machines (home laptop versus work
    laptop, for example), and some between distributions (Manjaro versus
    Xubuntu versus Fedora).

# setup

1.  Setup a git repo for your dotfiles.  Create subdirectories for your main
    user (e.g., "sitaram"), "root", and "system".  Create other subdirectories
    if you need (see example in next step).

2.  Setup a `dac.dirs` file in the repo, but do not commit it, because it will
    be different on each machine.  (You may want to add it to your
    `.gitignore` file).

    The **simplest** `dac.dirs` contains just one line, for example:

        /home/sitaram       sitaram

    where "sitaram" is a subdirectory in your git repo.  But this is not
    really using this tool's power :)

    For example, the `dac.dirs` file on my work laptop looks somewhat like
    this:

        /home/sitaram       allusers    sitaram     sitaram-work-laptop
        /root               allusers    root        root-work-laptop
        /                   system      xubuntu     work-laptop

    and this is on my home laptop, where I have an extra userid (used for
    testing gitolite):

        /home/sitaram       allusers    sitaram     sitaram-home-laptop
        /home/g3            allusers    g3
        /root               allusers    root        root-home-laptop
        /                   system      manjaro     work-laptop

    The first column (must be a fully-qualified directory name) is a
    "destination", and the others are "source" subdirectories in the git repo.

    A particular destination gets files from all of the source subdirectories
    listed on its line.

# the basic workflow

The basic workflow is:

1.  cd to the repo, then git pull (if needed)

2.  run `dac`
    *   `vimdiff` will popup on each file that has new differences between the
        repo and your local filesystem
    *   use `vimdiff` to manually propagate changes in either direction and save

3.  finally, commit and push.

When you run `dac`, each file that differs from its parent, is shown using
`vimdiff`.

Copy whatever changes you like (*in either direction*), and save the files.
If the files are still different, then dac will remember the difference you
chose to ignore, so *next time* you won't see it again, as long as the
difference is exactly the same.  (*This part is rather clever; it uses git's
excellent `patch-id` sub-command to add an entry to a "skiplist"*.)

You *will* see the files if either of them changes even a tiny bit of course,
so it's quite safe.  Also, the skiplist is plain text; you can manually remove
lines from it if you wish to.  Or just delete the whole file to "unskip"
everything.

# putting it on a new system

Just clone the repo, create a `dac.dir` with the sources you want for each
destination, and run `dac`.  That should be it.

# adding new files

Let's say you want to add a script that is living in `~g3/bin` (see my example
above.

First, decide which subdirectory of the git repo this should go to.  If it's
applicable for all users, that may be the `allusers` subdirectory, and so on.

Let's say in this case we decide this file is only for the `g3` user.  To add
this file, you'd just run:

    cd ~g3
    cp --parents bin/my-script $DAC_REPO/g3
    cd $DAC_REPO
    ...now git add, commit, push...

replacing `$DAC_REPO` with the path to the git repo you're using.

This function can be added to the script; let me know if you need it.
Generally, adding files is pretty rare for me now -- almost everything I ever
need is already in there :)

